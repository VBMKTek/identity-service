name: CI/CD - SIT Environment

on:
  push:
    branches: main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_RAW: ${{ github.repository }}
  ENVIRONMENT: sit

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Check for test reports
      id: test-reports
      run: |
        if find . -name "TEST-*.xml" -path "*/build/test-results/test/*" | grep -q .; then
          echo "found=true" >> $GITHUB_OUTPUT
        else
          echo "found=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: (success() || failure()) && steps.test-reports.outputs.found == 'true'
      with:
        name: Gradle Tests - SIT
        path: '**/build/test-results/test/TEST-*.xml'
        reporter: java-junit
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && steps.test-reports.outputs.found == 'true'
      with:
        name: test-results-sit
        path: '**/build/test-results/test/TEST-*.xml'

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push Docker Image
    
    outputs:
      image_name: ${{ steps.image-name.outputs.image_name }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase image name
      id: image-name
      run: |
        IMAGE_NAME=$(echo "${{ env.IMAGE_NAME_RAW }}" | tr '[:upper:]' '[:lower:]')
        echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Set up Docker registry authentication
      run: |
        echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      
    - name: Generate version tag
      id: version
      run: |
        TIMESTAMP=$(date +%Y%m%d.%H%M)
        SHORT_SHA=${GITHUB_SHA:0:8}
        VERSION_TAG="sit-${TIMESTAMP}-${SHORT_SHA}"
        echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image with Jib
      env:
        DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:${{ steps.version.outputs.version_tag }}
      run: |
        ./gradlew jib \
          -Djib.to.image="${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:${{ steps.version.outputs.version_tag }}" \
          -Djib.to.auth.username="${{ github.actor }}" \
          -Djib.to.auth.password="${{ secrets.GHCR_PAT }}"
          
    - name: Image summary
      run: |
        echo "## üöÄ SIT Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | SIT |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | \`${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:${{ steps.version.outputs.version_tag }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Latest Tag | \`${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:sit-latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Time | ${{ steps.version.outputs.timestamp }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY

  deploy-sit:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy to SIT Environment
    if: github.ref == 'refs/heads/develop'
    
    environment: sit
    
    steps:
    - name: Deploy to SIT
      run: |
        echo "üöÄ Deploying identity-service to SIT environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ needs.build-and-push.outputs.image_name }}:sit-latest"
        # Add your SIT deployment logic here
        # kubectl apply -f k8s/sit/ --namespace=sit
        # kubectl set image deployment/identity-service identity-service=${{ env.REGISTRY }}/${{ needs.build-and-push.outputs.image_name }}:sit-latest -n sit
        
    - name: Health check
      run: |
        echo "üîç Performing health check..."
        # Add health check logic here
        # curl -f http://sit.example.com/api/identity-service/actuator/health || exit 1
