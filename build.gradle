plugins {
	id 'org.sonarqube' version '4.4.1.3373' apply false
	id 'org.springframework.boot' version '3.4.4' apply false
	id 'io.spring.dependency-management' version '1.1.4' apply false
	id 'com.diffplug.spotless' version '6.25.0' apply false
}

group = 'com.preschool'
version = '0.0.1-SNAPSHOT'

ext {
	snakeyamlVersion = '2.2'
	springCloudVersion = '2024.0.0'
}

allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url 'http://nexus.pisolution.vn/repository/maven-public/'
			allowInsecureProtocol = true
			credentials {
				username = project.findProperty('nexUsername') ?: System.getenv('nexUsername')
				password = project.findProperty('nexPassword') ?: System.getenv('nexPassword')
			}
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'org.sonarqube'

	sourceCompatibility = JavaVersion.VERSION_21

	// Spotless Configuration
	spotless {
		java {
			target '**/*.java'
			targetExclude 'build/generated/**/*.*'
			googleJavaFormat('1.20.0')
			importOrder()
			removeUnusedImports()
			indentWithTabs(2)
			indentWithSpaces(4)
			endWithNewline()
		}
	}

	// Apply SonarQube configuration
	apply from: "${rootDir}/sonar.gradle"

	// Dependency Management
	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	dependencies {
		// Core Dependencies
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework:spring-webmvc'
		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.kafka:spring-kafka'
		implementation 'org.liquibase:liquibase-core'

		// Keycloak
		implementation 'org.keycloak:keycloak-admin-client:26.0.6'

		// Swagger/OpenAPI
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

		// Prometheus Monitoring
		implementation 'io.micrometer:micrometer-registry-prometheus'

		// JWT
		implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
		implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
		implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

		// Prometheus/Micrometer
		implementation 'io.micrometer:micrometer-registry-prometheus'

		// Custom Library
		implementation 'com.preschool.libraries:base:20250417.1453-main-878c927-SNAPSHOT'
		implementation 'com.preschool.libraries:security:20250417.1544-main-f128132-SNAPSHOT'

		// Lombok
		compileOnly 'org.projectlombok:lombok:1.18.34'
		annotationProcessor 'org.projectlombok:lombok:1.18.34'
		annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

		// MapStruct
		implementation 'org.mapstruct:mapstruct:1.6.0'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'

		// Runtime
		runtimeOnly 'org.postgresql:postgresql'

		// Test Dependencies
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.testcontainers:postgresql:1.17.6'
	}

	// Test Configuration
	tasks.named('test') {
		useJUnitPlatform()
	}

	// JaCoCo Configuration
	jacocoTestReport {
		dependsOn test
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/*Application.class',
						'**/Application*.*'
				])
			}))
		}
	}

	jacocoTestCoverageVerification {
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/*Application.class',
						'**/Application*.*'
				])
			}))
		}
		violationRules {
			rule {
				limit {
					minimum = 0.0
				}
			}
		}
	}

	test.finalizedBy jacocoTestReport
	check.dependsOn jacocoTestCoverageVerification
}